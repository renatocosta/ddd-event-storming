{"stats":{"totalMutantsCount":59,"killedCount":0,"notCoveredCount":15,"escapedCount":44,"errorCount":0,"skippedCount":0,"timeOutCount":0,"msi":0,"mutationCodeCoverage":74.58,"coveredCodeMsi":0},"escaped":[{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationEmailNotified extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationEmailNotified extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/Events\/NotificationEmailNotified.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Notification $notification)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.135, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationEmailPublished extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationEmailPublished extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/Events\/NotificationEmailPublished.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Notification $notification)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.435, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationSmsNotified extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationSmsNotified extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/Events\/NotificationSmsNotified.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Notification $notification)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.133, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationSmsPublished extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Notification\\Notification;\nclass NotificationSmsPublished extends AbstractEvent\n{\n    public function __construct(public Notification $notification)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/Events\/NotificationSmsPublished.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Notification $notification)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.430, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!true && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if (!true && !$event instanceof NotificationEmailPublished) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.421, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!false && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if (!false && !$event instanceof NotificationEmailPublished) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.423, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if ($event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if ($event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.423, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !true) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if (!$event instanceof NotificationSmsPublished && !true) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.425, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !false) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if (!$event instanceof NotificationSmsPublished && !false) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.424, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && $event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if (!$event instanceof NotificationSmsPublished && $event instanceof NotificationEmailPublished) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.421, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"LogicalAnd","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished || !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function publish(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n+        if (!$event instanceof NotificationSmsPublished || !$event instanceof NotificationEmailPublished) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.421, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        \n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n-        $this->raise($event);\n+        \n     }\n     public function notify(Eventable $event) : void\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.420, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!true && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if (!true && !$event instanceof NotificationEmailNotified) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.132, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!false && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if (!false && !$event instanceof NotificationEmailNotified) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.131, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if ($event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if ($event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.131, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !true) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if (!$event instanceof NotificationSmsNotified && !true) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.131, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !false) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if (!$event instanceof NotificationSmsNotified && !false) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.134, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && $event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if (!$event instanceof NotificationSmsNotified && $event instanceof NotificationEmailNotified) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.133, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"LogicalAnd","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified || !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Eventable $event) : void\n     {\n-        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n+        if (!$event instanceof NotificationSmsNotified || !$event instanceof NotificationEmailNotified) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.129, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        \n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n             throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n-        $this->raise($event);\n+        \n     }\n     public function of(string $message, string $recipient, string $sender = null) : self\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nNotification Aggregate Root (Tests\\Notifiction\\Model\\NotificationAggregateRoot)\n \u2714 Executing a notify sms usecase successfully\n \u2714 Executing a notify email usecase successfully\n\nTime: 00:00.132, Memory: 28.00 MB\n\nOK (2 tests, 6 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderConfirmed extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderConfirmed extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/Events\/OrderConfirmed.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Order $order)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.479, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderCreated extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderCreated extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/Events\/OrderCreated.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Order $order)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.473, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        \n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n     public function create() : void\n     {\n         $this->status = $this->state->create();\n-        $this->raise(new OrderCreated($this));\n+        \n     }\n     public function uncreate() : void\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.479, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        \n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n     public function confirm() : void\n     {\n         $this->status = $this->state->confirm();\n-        $this->raise(new OrderConfirmed($this));\n+        \n     }\n     public function getStatus() : OrderStatus\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.466, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' > $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function addEntityIdToPayload() : self\n     {\n-        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n+        $this->payload = array_merge($this->payload, ['entity_id' > $this->getIdentifier()->id]);\n         return $this;\n     }\n     public function replaceEventTypeToPayload(string $eventType) : self","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.466, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, []);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function addEntityIdToPayload() : self\n     {\n-        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n+        $this->payload = array_merge($this->payload, []);\n         return $this;\n     }\n     public function replaceEventTypeToPayload(string $eventType) : self","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.459, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"UnwrapArrayMerge","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = $this->payload;\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function addEntityIdToPayload() : self\n     {\n-        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n+        $this->payload = $this->payload;\n         return $this;\n     }\n     public function replaceEventTypeToPayload(string $eventType) : self","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.476, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"UnwrapArrayMerge","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = ['entity_id' => $this->getIdentifier()->id];\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function addEntityIdToPayload() : self\n     {\n-        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n+        $this->payload = ['entity_id' => $this->getIdentifier()->id];\n         return $this;\n     }\n     public function replaceEventTypeToPayload(string $eventType) : self","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.466, Memory: 32.00 MB\n\nOK (7 tests, 68 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            \n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private int $statusId)\n     {\n         try {\n-            Assertion::keyExists(self::STATUS, $statusId);\n+            \n         } catch (AssertionFailedException $e) {\n             throw new UnableToHandleOrders($e->getMessage());\n         }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Status (Tests\\Order\\Model\\OrderStatus)\n \u2714 Should fail to status when values are missing\n \u2714 Entering a list of status successfully\n\nOrder Transition (Tests\\Order\\Model\\OrderTransition)\n \u2714 Should fail to invalid state\n \u2714 Entering a valid status\n\nOrder (Tests\\Order\\Model\\Order)\n \u2714 Create order with invalid transitions should be considered invalid\n \u2714 Confirm order with invalid transitions should be considered invalid\n \u2714 Uncreate order with invalid transitions should be considered invalid\n \u2714 Failorder with invalid transitions should be considered invalid\n \u2714 Entering a list of transitions successfully\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.530, Memory: 36.00 MB\n\nOK (16 tests, 76 assertions)"},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n         try {\n             Assertion::keyExists(self::STATUS, $statusId);\n         } catch (AssertionFailedException $e) {\n-            throw new UnableToHandleOrders($e->getMessage());\n+            new UnableToHandleOrders($e->getMessage());\n         }\n         $this->status = self::STATUS[$statusId];\n     }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder Status (Tests\\Order\\Model\\OrderStatus)\n \u2714 Should fail to status when values are missing\n \u2714 Entering a list of status successfully\n\nTime: 00:00.120, Memory: 26.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/State\/OrderState.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     protected int $fromStatus;\n     public function uncreate() : OrderStatus\n     {\n-        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n+        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n     }\n     public function create() : OrderStatus\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder (Tests\\Order\\Model\\Order)\n \u2714 Create order with invalid transitions should be considered invalid\n \u2714 Confirm order with invalid transitions should be considered invalid\n \u2714 Uncreate order with invalid transitions should be considered invalid\n \u2714 Failorder with invalid transitions should be considered invalid\n \u2714 Entering a list of transitions successfully\n\nTime: 00:00.149, Memory: 28.00 MB\n\nOK (5 tests, 4 assertions)"},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/State\/OrderState.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function create() : OrderStatus\n     {\n-        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n+        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n     }\n     public function fail() : OrderStatus\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder (Tests\\Order\\Model\\Order)\n \u2714 Create order with invalid transitions should be considered invalid\n \u2714 Confirm order with invalid transitions should be considered invalid\n \u2714 Uncreate order with invalid transitions should be considered invalid\n \u2714 Failorder with invalid transitions should be considered invalid\n \u2714 Entering a list of transitions successfully\n\nTime: 00:00.151, Memory: 28.00 MB\n\nOK (5 tests, 4 assertions)"},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/State\/OrderState.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function fail() : OrderStatus\n     {\n-        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n+        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n     }\n     public function confirm() : OrderStatus\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder (Tests\\Order\\Model\\Order)\n \u2714 Create order with invalid transitions should be considered invalid\n \u2714 Confirm order with invalid transitions should be considered invalid\n \u2714 Uncreate order with invalid transitions should be considered invalid\n \u2714 Failorder with invalid transitions should be considered invalid\n \u2714 Entering a list of transitions successfully\n\nTime: 00:00.147, Memory: 28.00 MB\n\nOK (5 tests, 4 assertions)"},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\State;\n\nuse Domain\\Model\\Order\\OrderStatus;\nuse Domain\\Model\\Order\\UnableToHandleOrders;\nabstract class OrderState implements OrderStateable\n{\n    protected int $fromStatus;\n    public function uncreate() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::UNCREATED]);\n    }\n    public function create() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CREATED]);\n    }\n    public function fail() : OrderStatus\n    {\n        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::FAILED]);\n    }\n    public function confirm() : OrderStatus\n    {\n        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/State\/OrderState.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function confirm() : OrderStatus\n     {\n-        throw UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n+        UnableToHandleOrders::dueTo(UnableToHandleOrders::STATUS_TRANSITION_VIOLATION, OrderStatus::STATUS[$this->fromStatus], OrderStatus::STATUS[OrderStatus::CONFIRMED]);\n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nOrder (Tests\\Order\\Model\\Order)\n \u2714 Create order with invalid transitions should be considered invalid\n \u2714 Confirm order with invalid transitions should be considered invalid\n \u2714 Uncreate order with invalid transitions should be considered invalid\n \u2714 Failorder with invalid transitions should be considered invalid\n \u2714 Entering a list of transitions successfully\n\nOrder Aggregate Root (Tests\\Order\\Model\\OrderAggregateRoot)\n \u2714 Should fail to create order use case for invalid transition\n \u2714 Should fail to confirm order use case for invalid transition\n \u2714 Executing a create order usecase successfully\n \u2714 Should fail to confirm order usecase when reading a violated payload\n \u2714 Executing a confirm order usecase successfully\n\nTime: 00:00.220, Memory: 30.00 MB\n\nOK (10 tests, 43 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\User\\User;\nclass UserAssignedToOrder extends AbstractEvent\n{\n    public function __construct(public User $user)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\User\\User;\nclass UserAssignedToOrder extends AbstractEvent\n{\n    public function __construct(public User $user)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/Events\/UserAssignedToOrder.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public User $user)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.428, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\User\\User;\nclass UserAuthenticated extends AbstractEvent\n{\n    public function __construct(public User $user)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\User\\User;\nclass UserAuthenticated extends AbstractEvent\n{\n    public function __construct(public User $user)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/Events\/UserAuthenticated.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public User $user)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.419, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\User\\User;\nclass UserIdentified extends AbstractEvent\n{\n    public function __construct(public User $user)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\User\\User;\nclass UserIdentified extends AbstractEvent\n{\n    public function __construct(public User $user)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/Events\/UserIdentified.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public User $user)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.429, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        \n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n     private string $token;\n     public function identify() : void\n     {\n-        $this->raise(new UserIdentified($this));\n+        \n     }\n     public function authenticate(?UserModel $user) : void\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.422, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if ($user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function authenticate(?UserModel $user) : void\n     {\n-        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n+        if ($user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n             throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n         }\n         $this->userIdentified = $user;","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.430, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function authenticate(?UserModel $user) : void\n     {\n-        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n+        if (!$user || Hash::check($this->smsVerificationCode->code(), $user->password)) {\n             throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n         }\n         $this->userIdentified = $user;","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.427, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"LogicalOr","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user && !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function authenticate(?UserModel $user) : void\n     {\n-        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n+        if (!$user && !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n             throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n         }\n         $this->userIdentified = $user;","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.437, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        \n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n         }\n         $this->userIdentified = $user;\n-        $this->raise(new UserAuthenticated($this));\n+        \n         $this->raise(new UserAssignedToOrder($this));\n     }\n     public function userIdentified() : UserModel","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.426, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        \n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         $this->userIdentified = $user;\n         $this->raise(new UserAuthenticated($this));\n-        $this->raise(new UserAssignedToOrder($this));\n+        \n     }\n     public function userIdentified() : UserModel\n     {","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.443, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":100},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function andFinally() : void\n     {\n-        \/\/Invalidate current access token\n-        $this->userIdentified->tokens()->delete();\n+        \n         \/\/Assign a new one\n         $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n     }","processOutput":"PHPUnit 9.5.11 by Sebastian Bergmann and contributors.\n\nEnd To End (Tests\\EndToEnd)\n \u2714 Executing a create order end to end successfully\n \u2714 Executing a confirm order end to end successfully\n\nTime: 00:00.427, Memory: 32.00 MB\n\nOK (2 tests, 29 assertions)"}],"timeouted":[],"killed":[],"errored":[],"uncovered":[{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     public function publish(Eventable $event) : void\n     {\n         if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n-            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n+            UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);\n     }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Notification;\n\nuse Common\\Application\\Event\\Eventable;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationEmailPublished;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsNotified;\nuse Domain\\Model\\Notification\\Events\\NotificationSmsPublished;\nuse Illuminate\\Support\\Facades\\Log;\nfinal class NotificationEntity extends AggregateRoot implements Notification\n{\n    private string $message;\n    private string $sender;\n    private string $recipient;\n    public function asSender(string $who) : self\n    {\n        $this->sender = $who;\n        return $this;\n    }\n    public function asRecipient(string $who) : self\n    {\n        $this->recipient = $who;\n        return $this;\n    }\n    public function message() : string\n    {\n        return $this->message;\n    }\n    public function sender() : string\n    {\n        return $this->sender;\n    }\n    public function recipient() : string\n    {\n        return $this->recipient;\n    }\n    public function publish(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsPublished && !$event instanceof NotificationEmailPublished) {\n            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function notify(Eventable $event) : void\n    {\n        if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n            UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n        }\n        $this->raise($event);\n    }\n    public function of(string $message, string $recipient, string $sender = null) : self\n    {\n        $this->message = $message;\n        $this->recipient = $recipient;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Notification\/NotificationEntity.php","originalStartLine":60},"diff":"--- Original\n+++ New\n@@ @@\n     public function notify(Eventable $event) : void\n     {\n         if (!$event instanceof NotificationSmsNotified && !$event instanceof NotificationEmailNotified) {\n-            throw UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n+            UnableToHandleNotification::dueTo(UnableToHandleNotification::MISMATCH_EVENT, $event->getEventName());\n         }\n         $this->raise($event);\n     }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderFailed extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderFailed extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/Events\/OrderFailed.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Order $order)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderUncreated extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        parent::__construct();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order\\Events;\n\nuse Common\\Application\\Event\\AbstractEvent;\nuse Domain\\Model\\Order\\Order;\nclass OrderUncreated extends AbstractEvent\n{\n    public function __construct(public Order $order)\n    {\n        \n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/Events\/OrderUncreated.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(public Order $order)\n     {\n-        parent::__construct();\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        \n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     public function uncreate() : void\n     {\n         $this->status = $this->state->uncreate();\n-        $this->raise(new OrderUncreated($this));\n+        \n     }\n     public function fail() : void\n     {","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        $this->raise(new OrderFailed($this));\n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\HumanCode;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\Order\\Events\\OrderConfirmed;\nuse Domain\\Model\\Order\\Events\\OrderCreated;\nuse Domain\\Model\\Order\\Events\\OrderFailed;\nuse Domain\\Model\\Order\\Events\\OrderUncreated;\nuse Domain\\Model\\Order\\State\\OrderStateable;\nfinal class OrderEntity extends AggregateRoot implements Order\n{\n    private OrderStateable $state;\n    private OrderStatus $status;\n    private Identified $identifier;\n    private HumanCode $orderNumber;\n    private Mobile $mobileNumber;\n    private SmsVerificationCode $smsVerificationCode;\n    private array $payload = [];\n    private string $token;\n    public function fromState(OrderStateable $state) : self\n    {\n        $this->state = $state;\n        return $this;\n    }\n    public function create() : void\n    {\n        $this->status = $this->state->create();\n        $this->raise(new OrderCreated($this));\n    }\n    public function uncreate() : void\n    {\n        $this->status = $this->state->uncreate();\n        $this->raise(new OrderUncreated($this));\n    }\n    public function fail() : void\n    {\n        $this->status = $this->state->fail();\n        \n    }\n    public function confirm() : void\n    {\n        $this->status = $this->state->confirm();\n        $this->raise(new OrderConfirmed($this));\n    }\n    public function getStatus() : OrderStatus\n    {\n        return $this->status;\n    }\n    public function addEntityIdToPayload() : self\n    {\n        $this->payload = array_merge($this->payload, ['entity_id' => $this->getIdentifier()->id]);\n        return $this;\n    }\n    public function replaceEventTypeToPayload(string $eventType) : self\n    {\n        $this->payload['event_type'] = $eventType;\n        return $this;\n    }\n    public function payload() : array\n    {\n        return $this->payload;\n    }\n    public function smsVerificationCode() : SmsVerificationCode\n    {\n        return $this->smsVerificationCode;\n    }\n    public function withSmsVerificationCode(SmsVerificationCode $smsVerificationCode) : void\n    {\n        $this->smsVerificationCode = $smsVerificationCode;\n    }\n    public function attachToken(string $token) : void\n    {\n        $this->token = $token;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function of(Identified $identifier, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        $this->status = new OrderStatus(OrderStatus::UNCREATED);\n        return $this;\n    }\n    public function from(HumanCode $humanCode, Mobile $mobile) : self\n    {\n        $this->orderNumber = $humanCode;\n        $this->mobileNumber = $mobile;\n        return $this;\n    }\n    public function orderNumber() : HumanCode\n    {\n        return $this->orderNumber;\n    }\n    public function mobileNumber() : Mobile\n    {\n        return $this->mobileNumber;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Identified $identifier, OrderStatus $status, HumanCode $orderNumber, array $payload) : self\n    {\n        $this->identifier = $identifier;\n        $this->status = $status;\n        $this->orderNumber = $orderNumber;\n        $this->payload = $payload;\n        return $this;\n    }\n    public function __toString() : string\n    {\n        return sprintf('Status %s', $this->status);\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderEntity.php","originalStartLine":56},"diff":"--- Original\n+++ New\n@@ @@\n     public function fail() : void\n     {\n         $this->status = $this->state->fail();\n-        $this->raise(new OrderFailed($this));\n+        \n     }\n     public function confirm() : void\n     {","processOutput":""},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!true) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isSame(ValueObject $statuses) : bool\n     {\n-        if (!$statuses instanceof self) {\n+        if (!true) {\n             return false;\n         }\n         return $this->toNative() === $statuses->toNative();","processOutput":""},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!false) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isSame(ValueObject $statuses) : bool\n     {\n-        if (!$statuses instanceof self) {\n+        if (!false) {\n             return false;\n         }\n         return $this->toNative() === $statuses->toNative();","processOutput":""},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if ($statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isSame(ValueObject $statuses) : bool\n     {\n-        if (!$statuses instanceof self) {\n+        if ($statuses instanceof self) {\n             return false;\n         }\n         return $this->toNative() === $statuses->toNative();","processOutput":""},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return true;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     public function isSame(ValueObject $statuses) : bool\n     {\n         if (!$statuses instanceof self) {\n-            return false;\n+            return true;\n         }\n         return $this->toNative() === $statuses->toNative();\n     }","processOutput":""},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() !== $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$statuses instanceof self) {\n             return false;\n         }\n-        return $this->toNative() === $statuses->toNative();\n+        return $this->toNative() !== $statuses->toNative();\n     }\n     public static function fromNative(array $native) : self\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' > $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function toNative() : array\n     {\n-        return ['status' => $this->status];\n+        return ['status' > $this->status];\n     }\n     public function getId() : int\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return ['status' => $this->status];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\Order;\n\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\ValueObject;\nfinal class OrderStatus implements ValueObject\n{\n    public const UNCREATED = 0;\n    public const CREATED = 1;\n    public const FAILED = 2;\n    public const CONFIRMED = 3;\n    public const STATUS = [self::UNCREATED => 'uncreated', self::CREATED => 'created', self::FAILED => 'failed', self::CONFIRMED => 'confirmed'];\n    private string $status;\n    public function __construct(private int $statusId)\n    {\n        try {\n            Assertion::keyExists(self::STATUS, $statusId);\n        } catch (AssertionFailedException $e) {\n            throw new UnableToHandleOrders($e->getMessage());\n        }\n        $this->status = self::STATUS[$statusId];\n    }\n    public function isSame(ValueObject $statuses) : bool\n    {\n        if (!$statuses instanceof self) {\n            return false;\n        }\n        return $this->toNative() === $statuses->toNative();\n    }\n    public static function fromNative(array $native) : self\n    {\n        return new self($native['status']);\n    }\n    public function toNative() : array\n    {\n        return [];\n    }\n    public function getId() : int\n    {\n        return $this->statusId;\n    }\n    public function __toString() : string\n    {\n        return $this->status;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/Order\/OrderStatus.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function toNative() : array\n     {\n-        return ['status' => $this->status];\n+        return [];\n     }\n     public function getId() : int\n     {","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     public function authenticate(?UserModel $user) : void\n     {\n         if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n-            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n+            UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n         }\n         $this->userIdentified = $user;\n         $this->raise(new UserAuthenticated($this));","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            throw UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace Domain\\Model\\User;\n\nuse Assert\\Assert;\nuse Assert\\AssertionFailedException;\nuse Common\\ValueObjects\\AggregateRoot;\nuse Common\\ValueObjects\\Identity\\Identified;\nuse Domain\\Model\\User\\Events\\UserAuthenticated;\nuse Domain\\Model\\User\\Events\\UserIdentified;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Common\\ValueObjects\\Identity\\Password;\nuse Common\\ValueObjects\\Identity\\SmsVerificationCode;\nuse Common\\ValueObjects\\Misc\\Email;\nuse Common\\ValueObjects\\Misc\\Mobile;\nuse Domain\\Model\\User\\Events\\UserAssignedToOrder;\nuse Infrastructure\\Framework\\Entities\\UserModel;\nfinal class UserEntity extends AggregateRoot implements User\n{\n    private Identified $identifier;\n    private string $name;\n    private Mobile $mobile;\n    private SmsVerificationCode $smsVerificationCode;\n    private Email $email;\n    private Password $password;\n    private UserModel $userIdentified;\n    private string $orderId;\n    private string $orderNumber;\n    private string $token;\n    public function identify() : void\n    {\n        $this->raise(new UserIdentified($this));\n    }\n    public function authenticate(?UserModel $user) : void\n    {\n        if (!$user || !Hash::check($this->smsVerificationCode->code(), $user->password)) {\n            throw UnableToHandleUser::dueTo(UnableToHandleUser::MISMATCH_SMS_VERIFICATION_CODE, $this->smsVerificationCode->code(), $this->mobile());\n        }\n        $this->userIdentified = $user;\n        $this->raise(new UserAuthenticated($this));\n        $this->raise(new UserAssignedToOrder($this));\n    }\n    public function userIdentified() : UserModel\n    {\n        return $this->userIdentified;\n    }\n    public function name() : string\n    {\n        return $this->name;\n    }\n    public function email() : Email\n    {\n        return $this->email;\n    }\n    public function mobile() : Mobile\n    {\n        return $this->mobile;\n    }\n    public function password() : Password\n    {\n        return $this->password;\n    }\n    public function token() : string\n    {\n        return $this->token;\n    }\n    public function orderId() : string\n    {\n        return $this->orderId;\n    }\n    public function orderNumber() : string\n    {\n        return $this->orderNumber;\n    }\n    public function andFinally() : void\n    {\n        \/\/Invalidate current access token\n        $this->userIdentified->tokens()->delete();\n        \/\/Assign a new one\n        $this->token = $this->userIdentified->createToken('token_auth')->plainTextToken;\n    }\n    public function getIdentifier() : Identified\n    {\n        return $this->identifier;\n    }\n    public function fromExisting(Mobile $mobile, SmsVerificationCode $smsVerificationCode, string $orderId, string $orderNumber) : self\n    {\n        $this->mobile = $mobile;\n        $this->smsVerificationCode = $smsVerificationCode;\n        $this->orderId = $orderId;\n        $this->orderNumber = $orderNumber;\n        return $this;\n    }\n    public function of(Identified $identifier, string $name, Mobile $mobile, Email $email, Password $password) : self\n    {\n        try {\n            Assert::that($name)->notEmpty()->maxLength(100);\n        } catch (AssertionFailedException $e) {\n            UnableToHandleUser::dueTo($e->getMessage());\n        }\n        $this->identifier = $identifier;\n        $this->name = $name;\n        $this->mobile = $mobile;\n        $this->email = $email;\n        $this->password = $password;\n        return $this;\n    }\n}","originalFilePath":"\/var\/www\/src\/Domain\/Model\/User\/UserEntity.php","originalStartLine":124},"diff":"--- Original\n+++ New\n@@ @@\n         try {\n             Assert::that($name)->notEmpty()->maxLength(100);\n         } catch (AssertionFailedException $e) {\n-            throw UnableToHandleUser::dueTo($e->getMessage());\n+            UnableToHandleUser::dueTo($e->getMessage());\n         }\n         $this->identifier = $identifier;\n         $this->name = $name;","processOutput":""}]}